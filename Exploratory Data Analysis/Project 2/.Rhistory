print(x)
msg<-"Hello World"
print(msg)
msg
x
x<-1:20
x
x[-3]
x[-3:-7]
Inf
Nan
NaN
y<-c(1.7, T)
y
y<-c(1.7, T, "69")
y
as.numeric(y)
y<-c(T, 2, 3)
as.numeric(y)
x<-list(1, c(T,f))
x<-list(1, c(T,F))
x
m<-maxtrix(2,3)
m<-matrix(2,3)
m
mattrix
matrix()
m<-matrix(1:9, nrow=2, ncol=3)
m<-matrix(1:6, nrow=2, ncol=3)
m
dim(m)<-c(1,6)
m
dim(m)<-c(3,3)
dim(m)<-c(3,2)
m
dim(m)<-c(2,3)
m
dim(m)<-c(6,1)
m
x<-factor(c("Yes", "Yes", "No", "Yes", "No"))
x
table(x)
attributes(x)
pwd
dir
dir()
pwd()
read.table()
read.table
help(read.table)
x<-url(www.google.com)
x<-url("www.google.com")
con<-url("http://www.google.com")
x<-realline(con)
x<-readline(con)
x
x<-readline(con, r)
con<-url("http://www.google.com", "r")
x<-readlines(con)
x<-readlines(con)
x<-readLines(con)
con<-url("http://www.google.com", "r")
x<-readLines(con)
head(x)
dir()
pwd()
load("D:/Skitch/Code/R/Quiz 1/.RData")
ls()
Oz
install.packages("KernSmooth")
library(KernSmooth)
library(swril)
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
help(list.files)
?list.files
ls() -r
list.files(recursive=TRUE)
args(list.files)
old.dir<=getwd()
old.dir<-getwd()
mkdir("testdir")
md("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
dir.create("testdir2\testdir3" recursive=TRUE)
dir.create("testdir2/testdir3" recursive=TRUE)
dir.create("testdir2/testdir3", recursive=TRUE)
dir.remove("testdir2")
unlink("testdir2")
unlink("testdir2, recursive=TRUE")
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
source('D:/Skitch/Code/R/R-Programming/Assignment 2/cachemean.R')
source('D:/Skitch/Code/R/R-Programming/Assignment 2/makeVector.R')
x<-c(12, 13, 23, 67, 34, 23, 0)
?append
append(x, c(34, 21, 69))
length(x)
x<-append(x, c(34, 21, 69))
makeVector(x)
cachemean(x)
x<-1:10000
vec<-makeVector(x)
vec$getmean()
mx<-mean(x)
vec$setmean(mx)
vec$getmean()
cachemean(x)
source('D:/Skitch/Code/R/R-Programming/Assignment 2/makeVector.R')
source('D:/Skitch/Code/R/R-Programming/Assignment 2/cachemean.R')
x<-1:5000
makeVector(x)
cachemean(x)
source('D:/Skitch/Code/R/R-Programming/Assignment 2/makeVector.R')
source('D:/Skitch/Code/R/R-Programming/Assignment 2/makeVector.R')
vec<-makeVecto(x)
vec<-makeVector(x)
cachemean(vec)
source('D:/Skitch/Code/R/R-Programming/Assignment 2/makeVector.R')
apply(iris[, 1:4], 2, mean)
iris
sapply(split(Sepal.Length, virginica), mean)
sapply(split(iris$Sepal.Length, virginica), mean)
library(datasets)
data(iris)
sapply(split(iris$Sepal.Length, virginica), mean)
sapply(split(iris$Sepal.Length, "virginica"), mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
hp<-sapply(split(mtcars$hp, mtcars$cyl), mean)
hp
hp[3]-hp[1]
source('D:/temp/ch2.R', echo=TRUE)
y<-rnorm(100)
x<-rnorm(100)
plot(x,y)
plot(y,x)
x<-rnorm(100, mean=50, sd=0.1)
x<-rnorm(100, mean=50, sd=0.2)
plot(y,x)
plot(x,y)
x<-1:100
plot(x,y)
y<-rnorm(100, mean=50, sd=0.1)
plot(x,y)
x<-1:100
y<-100 + x^2
plot(x,y)
x=c(2, 4, 5)
x
y=hist(100)
y=norm(100)
hist(y)
y
y=runif(100)
hist(y)
y=gauss(100)
y=rnorm(100)
hist(y)
y=qnorm(100)
y=pbeta(100)
x<-rnorm(100,mean=50, sd=10)
hist(x)
x<-rnorm(100,mean=50, sd=1)
hist(x)
x<-rnorm(1000,mean=50, sd=1)
hist(x)
x<-rnorm(1000,mean=50, sd=.1)
hist(x)
x<-rnorm(1000,mean=50, sd=30)
hist(x)
x=runif(50)
y=rnorm(50)
plot(x,y)
hist(y)
hist(x)
hist(x)
x=rnorm(500)
hist(x)
x=gnorm(500)
x=1:100
y=dnorm(100,mean=10, sd=2)
plot(x,y)
y
y=dnorm(x,mean=10, sd=2)
plot(x,y)
y=dnorm(x,mean=45, sd=20)
plot(x,y)
y=dnorm(x,mean=45, sd=20, log=TRUE)
plot(x,y)
y=dnorm(x,mean=45, sd=13)
plot(x,y)
y=dnorm(x,mean=45, sd=1)
plot(x,y)
y=dnorm(x,mean=45, sd=0.1)
plot(x,y)
y=dnorm(x,mean=45, sd=10)
plot(x,y)
y=pnorm(x,mean=45, sd=10)
plot(x,y)
y=pnorm(x,mean=45, sd=10, lower.tail=FALSE)
plot(x,y)
y=pnorm(x,mean=45, sd=10, lower.tail=FALSE, log.p=TRUE)
plot(x,y)
y=qnorm(x,mean=45, sd=10)
plot(x,y)
y=qnorm(x,mean=45, sd=1)
y=qnorm(x,mean=0, sd=1)
library(MASS)
names(Boston)
plot(medv~lstat, Boston)
fit1=lm(medv~lstat, data=Boston)
fit1
summary(fit1)
abline(fit1, color="green")
abline(fit1, col="green")
abline(fit1, col="red")
abline(fit1,col="red")
?abline
abline(-fit1, color="green")
?rbline
plot.new()
plot(medv~lstat, Boston)
abline(fit1,col="red")
R.version.string
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swril()
swirl()
mydf<-read.csv(path2csv, stringAsFactors=FALSE)
mydf<-read.csv(file=path2csv, stringAsFactors=FALSE)
mydf<-read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version ==  "3.1.1", country == "US")
?Comparison
filter(cran, r_version <=  "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_or == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version)
)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(ip_id, package, size)
cran3<-select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install.packages(RODBC)
install.packages("RODBC")
library(RODBC)
ch<-odbcConnect("RLocal")
ch
site<-as.matrix(sqlFetch(ch,)"[Enrollment].[SiteInformation]", rownames="SiteCode")
site<-as.matrix(sqlFetch(ch,"[Enrollment].[SiteInformation]", rownames="SiteCode"))
site<-as.matrix(sqlFetch(ch, "[Enrollment].[SiteInformation]", rownames="SiteCode"))
site
site<-as.matrix(sqlFetch(ch, "Enrollment.SiteInformation", rownames="SiteCode"))
site
str(site)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternet=TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode==21231",xmlValue)
xpathSApply(rootNode,"@zipcode='21231',xmlValue)
)
xpathSApply(rootNode,"@zipcode='21231'",xmlValue)
xpathSApply(rootNode,"//zipcode='21231'",xmlValue)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringasFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print(tbl_df)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", count == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 )
filter(cran, size > 100500, r_os == "linux-gnu" )
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arange(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size + 1000)
mutate(cran3, correct_size =  size + 1000)
summarize(cran, avg_bytes = mean(size))
swril()
swirl
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package(cran, package)
by_package<-(cran, package)
by_package<- group_by(cran, package)
by_package
summarize(by_package, mean(size))
source('C:/Users/MSQUIC~1/AppData/Local/Temp/Rtmp2jDcTK/summarize1.R')
source('C:/Users/MSQUIC~1/AppData/Local/Temp/Rtmp2jDcTK/summarize1.R')
source('C:/Users/MSQUIC~1/AppData/Local/Temp/Rtmp2jDcTK/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_count <- filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
source('C:/Users/MSQUIC~1/AppData/Local/Temp/Rtmp2jDcTK/chain1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
submit()
source('~/.active-rstudio-document', echo=TRUE)
submit()
submit()
source('C:/Users/MSQUIC~1/AppData/Local/Temp/Rtmp2jDcTK/chain2.R', echo=TRUE)
submit()
submit()
submit()
submit()
subjects <- c(1:10)
activity <- c(seq(1,3), seq(2,3), seq(3,4))
activity <- c(rep(1,3), rep(2,3), rep(3,4))
dim(activity)
length(activity)
activity
data <- rnorm(10)
data
indx <- c(1,2,3)
label <- c("Sit", "Jump", "Walk")
activityLabel <- data.frame(indx, label)
activityLabel
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/GettingCleaningData/Quiz 3/Question 3.R')
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
lib
library(datasets)
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
library(lattice)
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | f, data = mtcars, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | data = mtcars, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | data = mtcars, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | data = mtcars, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
demo()
setwd("D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2")
library(dplyr)
dir.create("./Data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
zipFile <- "./Data/NEI_data.zip"
if (!file.exists(zipFile)) {
download.file(fileUrl, destfile = zipFile, mode="wb")  # download in binary mode
}
library(dplyr)
dir.create("./Data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
zipFile <- "./Data/NEI_data.zip"
if (!file.exists(zipFile)) {
download.file(fileUrl, destfile = zipFile, mode="wb")  # download in binary mode
}
library(dplyr)
dir.create("./Data", showWarnings = FALSE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
zipFile <- "./Data/NEI_data.zip"
if (!file.exists(zipFile)) {
download.file(fileUrl, destfile = zipFile, mode="wb")  # download in binary mode
}
source('~/.active-rstudio-document', echo=TRUE)
fname = unzip(tf, list=TRUE)$Name[1]
fname = unzip(zipFile, list=TRUE)$Name[1]
fname = unzip(zipFile, list=TRUE)$Name
fname
class(fname)
fname <- paste("./Data", fname)
fname
fname = unzip(zipFile, list=TRUE)$Name
fname <- paste("./Data", fname, sep = "/")
source('~/.active-rstudio-document', echo=TRUE)
!file.exists(fname)
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2/Question 1.R')
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2/Question 1.R', echo=TRUE)
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2/Question 1.R')
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2/Question 1.R', echo=TRUE)
unzip(zipFile, files = fname, overwrite = FALSE, exdir = "./Data") # Extract only missing files
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Skitch/Code/R/DataScienceSpecialization/DataScienceSpecialization/Exploratory Data Analysis/Project 2/Question 1.R')
